rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    match /users/{userId} {
      function isValidOwnerGroupCountUpdate() {
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(["owner_group_count"]) && resource.data.owner_group_count + 1 == getAfter(/databases/$(database)/documents/users/$(userId)).data.owner_group_count;
      }

      function isValidExcludeOwnerGroupCountUpdate() {
        return !("owner_group_count" in request.resource.data.diff(resource.data).affectedKeys());
      }

      allow read, create: if isSignedIn() && request.auth.uid == userId;
      allow update: if request.auth.uid == userId && (isValidExcludeOwnerGroupCountUpdate() || isValidOwnerGroupCountUpdate());
    }

    match /groups/{groupId} {
      allow create: if isSignedIn() && int(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.owner_group_count) < 5 && request.resource.data.created_by == request.auth.uid;
      allow read, update: if isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/member_users/$(request.auth.uid));
      allow delete: if false;
      // allow delete: if isSignedIn() && resource.data.created_by == request.auth.uid;

      match /member_users/{userId} {
        allow read: if isSignedIn() && exists(/$(request.path)/$(request.auth.uid)); // サブコレクションなのでここでルール設定が必要
        allow create: if isSignedIn() && getAfter(/databases/$(database)/documents/groups/$(groupId)).data.created_by == request.auth.uid; // created_byをなくするのであればfunctionsで対応する必要がある
        allow update, delete: if false; // functionsからのみ操作可能
        // allow update: if request.auth != null && request.auth.uid == userId; // <- このルールでフロントから更新を許可してもいい
      }

      match /books/{bookId} {
        function isValidGroupIdIfContain() {
          return "group_id" in request.resource.data && request.resource.data.group_id == groupId;
        }

        function isValidKeys() {
          return request.resource.data.keys().hasOnly(["group_id","date","price","cateory","payer","memo"])
        }

        allow read: if isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/member_users/$(request.auth.uid));
        allow create, update: if isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/member_users/$(request.auth.uid)) && isValidGroupIdIfContain() && isValidKeys();
        allow delete:if isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/member_users/$(request.auth.uid))
      }
    }

    // https://firebase.google.com/docs/firestore/security/rules-query?hl=ja#secure_collection_group_queries_based_on_a_field
    match /{path=**}/member_users/{userId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.id;
    }

    // 今回はcollection_groupsでbooksを取得する事はいのでfalseにしているが、必要なら以下のようになるだろう
    // このルールではbooksコレクションのドキュメントのフィールドにgroupIdが必須になる
    match /{path=**}/books/{bookId} {
      allow read: if false;
      // allow read: if isSignedIn() && exists(/databases/$(database)/documents/groups/$(resource.data.groupId)/member_users/$(request.auth.uid));
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}